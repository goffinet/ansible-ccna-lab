---
#ansible-playbook lab_setup.yml -e "dest_name=testlab count=3" -i inventories/bipod/hosts
- name: "Create a gns3 project and start a base topology"
  hosts: localhost
  gather_facts: False
  tasks:
    - name: "Remove network topology"
      gns3_project:
        url: "{{ gns3_url }}"
        project_name: "{{ project_name }}"
        state: absent
      tags:
        - create
        - start
        - provision
        - remove
      ignore_errors: yes
    - name: "Create network topology"
      gns3_project:
        url: "{{ gns3_url }}"
        project_name: "{{ project_name }}"
        state: present
        nodes_spec: "{{ gns3_nodes_spec }}"
        links_spec: "{{ gns3_links_spec }}"
      register: project_facts
      tags:
        - create
        - start
        - provision
        - duplicate
#    - debug: var=project_facts.project.project_id
    - name: "Start nodes in the project"
      gns3_project:
        url: "{{ gns3_url }}"
        project_name: "{{ project_name }}"
        state: opened
        nodes_state: started
        nodes_strategy: one_by_one
      tags:
        - start
        - provision
    - name: "Get the nodes facts"
      gns3_nodes_inventory:
        url: "{{ gns3_url }}"
        project_name: "{{ project_name }}"
      register: nodes_inventory
      tags:
        - start
        - provision
#    - debug: var=nodes_inventory
    - name: "Pause for 2 minutes to start all nodes"
      pause:
        minutes: 2
- name: "Provision nodes for Ansible management"
  hosts: all
  gather_facts: False
  vars:
    ansible_connection: local
    ansible_python_interpreter: "{{ ansible_playbook_python }}"
#    template: "templates/iosv_default_config.j2"
  tasks:
#    - debug: var=template
    - name: "Retrieving nodes inventory information"
      set_fact:
        nodes_inventory: "{{ hostvars['localhost']['nodes_inventory']['nodes_inventory'] }}"
      tags:
        - provision
    - name: Generate boilerplate config files
      block:
        - name: Create build folder
          file:
            path: "configs/build"
            state: directory
        - name: Generate config
          template:
            src: "{{ template }}"
            dest: "configs/build/{{ inventory_hostname }}.conf"
      tags:
        - provision
#    - debug: var=hostvars
    - name: "Deploy boilerplate configuration"
      block:
        - name: "Generate configuration variable"
          set_fact:
            boilerplate_config: "{{ lookup('template', '{{ template }}') }}"
        - name: "Push config on iosv_l3 nodes"
          when: ansible_network_os == "ios" and image_style == "iosv_l3"
          gns3_telnet_console:
            remote_addr: "{{ nodes_inventory[inventory_hostname]['server'] }}"
            port: "{{ nodes_inventory[inventory_hostname]['console_port'] }}"
            send_newline: yes
            command: "{{ boilerplate_config.splitlines() }}"
            pause: 1
            timeout:
              general: 180
              pre_login: 60
              post_login: 60
              login_prompt: 30
              config_dialog: 30
        - name: "Push config on iosv_l2 nodes"
          when: ansible_network_os == "ios" and image_style == "iosv_l2"
          gns3_telnet_console:
            remote_addr: "{{ nodes_inventory[inventory_hostname]['server'] }}"
            port: "{{ nodes_inventory[inventory_hostname]['console_port'] }}"
            send_newline: yes
            login_prompt:
              - ">"
            user: ""
            password: ""
            prompts:
              - "[#]"
            command: "{{ boilerplate_config.splitlines() }}"
            pause: 1
            timeout:
              general: 180
              pre_login: 60
              post_login: 60
              login_prompt: 30
              config_dialog: 30
        - name: "Push config on centos nodes"
          when: image_style == "centos"
          telnet:
            host: "{{ nodes_inventory[inventory_hostname]['server'] }}"
            port: "{{ nodes_inventory[inventory_hostname]['console_port'] }}"
            login_prompt: "centos8 login:"
            user: "{{ ansible_user }}"
            password: "{{ ansible_password }}"
            send_newline: yes
            prompts:
              - "[#]"
            command: "{{ boilerplate_config.splitlines() }}"
            timeout: 180
            pause: 2
        - name: "Push config on openwrt nodes"
          when: image_style == "openwrt"
          gns3_telnet_console:
            remote_addr: "{{ nodes_inventory[inventory_hostname]['server'] }}"
            port: "{{ nodes_inventory[inventory_hostname]['console_port'] }}"
            send_newline: yes
            command: "{{ boilerplate_config.splitlines() }}"
            pause: 1
            timeout:
              general: 240
              pre_login: 120
              post_login: 60
              login_prompt: 30
              config_dialog: 30
        - name: "Pause for 3 minutes to build all nodes"
          pause:
            minutes: 3
      tags:
        - provision
    - name: "Stop all nodes"
      gns3_project:
        url: "{{ gns3_url }}"
        project_name: "{{ project_name }}"
        state: opened
        nodes_state: stopped
        nodes_strategy: one_by_one
        nodes_delay: 3
      tags:
        - provision
        - duplicate
    - name: "Close the project"
      gns3_project:
        url: "{{ gns3_url }}"
        project_name: "{{ project_name }}"
        state: closed
      tags:
        - provision
        - duplicate
- name: "Duplicate the project"
  hosts: localhost
  gather_facts: False
  vars:
    count: 1 # should be defined as extra-vars '-e'
    dest_name: '{{ project_name | default("ccna") }}' # should be defined as extra-vars '-e'
  tasks:
    - setup:
      tags:
        - duplicate
        - startup
    - name: "Duplicate the project"
      uri:
        url: "{{ gns3_url }}:3080/v2/projects/{{ project_facts.project.project_id }}/duplicate"
        method: POST
        body: >
          {"name": "{{ ansible_date_time.date }}-{{ dest_name }}-{{ item }}"}
        status_code: 201
        body_format: json
      with_sequence: count={{ count }} start=1
      tags:
        - duplicate
    - name: "Print projects name"
      debug:
        msg: |
          {"name": "{{ ansible_date_time.date }}-{{ dest_name }}-{{ item }}"}
      with_sequence: count={{ count }} start=1
      tags:
        - duplicate
